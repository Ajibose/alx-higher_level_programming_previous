===============================================================
Test documentation for the 0-add_integer.py module
===============================================================

The module contains only one function ''add_integer()''

''add_integer'' returns the addition of two integers. It takes only floats and integers and raise a type error otherwise
In the case of floats, it case the arguments to integers before use


for integers
===============

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3

	>>> add_integer(-4, 2)
	-2

	>>> add_integer(-2, -2)
	-4

for floats
==============

::

	>>> add_integer(4.3, 2)
	6

	>>> add_integer(2.3, 3.4)
	5

	>>> add_integer(3, 2.4)
	5

	>>> add_integer(1.2, -4)
	-3

	>>> add_integer(-1.3, -2.4)
	-3

	>>> add_integer(-1.2, 4)
	3

For Zero argument
==================
	>>> add_integer()
	Traceback (most recent call last):
		...
	TypeError: add_integer() missing 1 required positional argument: 'a'

for a as Null argument
=======================
	>>> add_integer(None, 2)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

for argument b as Null
=======================
	>>> add_integer(2, None)
	Traceback (most recent call last):
		...
	TypeError: b must be an integer


for argument as string
=======================
	>>> add_integer("Boy", 2)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

	>>> add_integer(2, "Cat")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Testing with complex number
============================
	>>> add_integer(2+3j, 3)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer
